#pragma once
#include <iostream>
#include <vector>

static constexpr int8_t decode2_nozero[4][2] = {
    {-1, -1},
    {-1, 1},
    {1, -1},
    {1, 1}};

static constexpr uint8_t encode2_nozero(int8_t v0, int8_t v1) noexcept
{
    int8_t val[2] = {v0, v1};
    for (int i = 0; i < 4; ++i)
    {
        if (decode2_nozero[i] == val)
        {
            return i;
        }
    }
    return 0;
}

static constexpr int8_t decode5[256][5] = {
    {-1, -1, -1, -1, -1},
    {-1, -1, -1, -1, 0},
    {-1, -1, -1, -1, 1},
    {-1, -1, -1, 0, -1},
    {-1, -1, -1, 0, 0},
    {-1, -1, -1, 0, 1},
    {-1, -1, -1, 1, -1},
    {-1, -1, -1, 1, 0},
    {-1, -1, -1, 1, 1},
    {-1, -1, 0, -1, -1},
    {-1, -1, 0, -1, 0},
    {-1, -1, 0, -1, 1},
    {-1, -1, 0, 0, -1},
    {-1, -1, 0, 0, 0},
    {-1, -1, 0, 0, 1},
    {-1, -1, 0, 1, -1},
    {-1, -1, 0, 1, 0},
    {-1, -1, 0, 1, 1},
    {-1, -1, 1, -1, -1},
    {-1, -1, 1, -1, 0},
    {-1, -1, 1, -1, 1},
    {-1, -1, 1, 0, -1},
    {-1, -1, 1, 0, 0},
    {-1, -1, 1, 0, 1},
    {-1, -1, 1, 1, -1},
    {-1, -1, 1, 1, 0},
    {-1, -1, 1, 1, 1},
    {-1, 0, -1, -1, -1},
    {-1, 0, -1, -1, 0},
    {-1, 0, -1, -1, 1},
    {-1, 0, -1, 0, -1},
    {-1, 0, -1, 0, 0},
    {-1, 0, -1, 0, 1},
    {-1, 0, -1, 1, -1},
    {-1, 0, -1, 1, 0},
    {-1, 0, -1, 1, 1},
    {-1, 0, 0, -1, -1},
    {-1, 0, 0, -1, 0},
    {-1, 0, 0, -1, 1},
    {-1, 0, 0, 0, -1},
    {-1, 0, 0, 0, 0},
    {-1, 0, 0, 0, 1},
    {-1, 0, 0, 1, -1},
    {-1, 0, 0, 1, 0},
    {-1, 0, 0, 1, 1},
    {-1, 0, 1, -1, -1},
    {-1, 0, 1, -1, 0},
    {-1, 0, 1, -1, 1},
    {-1, 0, 1, 0, -1},
    {-1, 0, 1, 0, 0},
    {-1, 0, 1, 0, 1},
    {-1, 0, 1, 1, -1},
    {-1, 0, 1, 1, 0},
    {-1, 0, 1, 1, 1},
    {-1, 1, -1, -1, -1},
    {-1, 1, -1, -1, 0},
    {-1, 1, -1, -1, 1},
    {-1, 1, -1, 0, -1},
    {-1, 1, -1, 0, 0},
    {-1, 1, -1, 0, 1},
    {-1, 1, -1, 1, -1},
    {-1, 1, -1, 1, 0},
    {-1, 1, -1, 1, 1},
    {-1, 1, 0, -1, -1},
    {-1, 1, 0, -1, 0},
    {-1, 1, 0, -1, 1},
    {-1, 1, 0, 0, -1},
    {-1, 1, 0, 0, 0},
    {-1, 1, 0, 0, 1},
    {-1, 1, 0, 1, -1},
    {-1, 1, 0, 1, 0},
    {-1, 1, 0, 1, 1},
    {-1, 1, 1, -1, -1},
    {-1, 1, 1, -1, 0},
    {-1, 1, 1, -1, 1},
    {-1, 1, 1, 0, -1},
    {-1, 1, 1, 0, 0},
    {-1, 1, 1, 0, 1},
    {-1, 1, 1, 1, -1},
    {-1, 1, 1, 1, 0},
    {-1, 1, 1, 1, 1},
    {0, -1, -1, -1, -1},
    {0, -1, -1, -1, 0},
    {0, -1, -1, -1, 1},
    {0, -1, -1, 0, -1},
    {0, -1, -1, 0, 0},
    {0, -1, -1, 0, 1},
    {0, -1, -1, 1, -1},
    {0, -1, -1, 1, 0},
    {0, -1, -1, 1, 1},
    {0, -1, 0, -1, -1},
    {0, -1, 0, -1, 0},
    {0, -1, 0, -1, 1},
    {0, -1, 0, 0, -1},
    {0, -1, 0, 0, 0},
    {0, -1, 0, 0, 1},
    {0, -1, 0, 1, -1},
    {0, -1, 0, 1, 0},
    {0, -1, 0, 1, 1},
    {0, -1, 1, -1, -1},
    {0, -1, 1, -1, 0},
    {0, -1, 1, -1, 1},
    {0, -1, 1, 0, -1},
    {0, -1, 1, 0, 0},
    {0, -1, 1, 0, 1},
    {0, -1, 1, 1, -1},
    {0, -1, 1, 1, 0},
    {0, -1, 1, 1, 1},
    {0, 0, -1, -1, -1},
    {0, 0, -1, -1, 0},
    {0, 0, -1, -1, 1},
    {0, 0, -1, 0, -1},
    {0, 0, -1, 0, 0},
    {0, 0, -1, 0, 1},
    {0, 0, -1, 1, -1},
    {0, 0, -1, 1, 0},
    {0, 0, -1, 1, 1},
    {0, 0, 0, -1, -1},
    {0, 0, 0, -1, 0},
    {0, 0, 0, -1, 1},
    {0, 0, 0, 0, -1},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 1},
    {0, 0, 0, 1, -1},
    {0, 0, 0, 1, 0},
    {0, 0, 0, 1, 1},
    {0, 0, 1, -1, -1},
    {0, 0, 1, -1, 0},
    {0, 0, 1, -1, 1},
    {0, 0, 1, 0, -1},
    {0, 0, 1, 0, 0},
    {0, 0, 1, 0, 1},
    {0, 0, 1, 1, -1},
    {0, 0, 1, 1, 0},
    {0, 0, 1, 1, 1},
    {0, 1, -1, -1, -1},
    {0, 1, -1, -1, 0},
    {0, 1, -1, -1, 1},
    {0, 1, -1, 0, -1},
    {0, 1, -1, 0, 0},
    {0, 1, -1, 0, 1},
    {0, 1, -1, 1, -1},
    {0, 1, -1, 1, 0},
    {0, 1, -1, 1, 1},
    {0, 1, 0, -1, -1},
    {0, 1, 0, -1, 0},
    {0, 1, 0, -1, 1},
    {0, 1, 0, 0, -1},
    {0, 1, 0, 0, 0},
    {0, 1, 0, 0, 1},
    {0, 1, 0, 1, -1},
    {0, 1, 0, 1, 0},
    {0, 1, 0, 1, 1},
    {0, 1, 1, -1, -1},
    {0, 1, 1, -1, 0},
    {0, 1, 1, -1, 1},
    {0, 1, 1, 0, -1},
    {0, 1, 1, 0, 0},
    {0, 1, 1, 0, 1},
    {0, 1, 1, 1, -1},
    {0, 1, 1, 1, 0},
    {0, 1, 1, 1, 1},
    {1, -1, -1, -1, -1},
    {1, -1, -1, -1, 0},
    {1, -1, -1, -1, 1},
    {1, -1, -1, 0, -1},
    {1, -1, -1, 0, 0},
    {1, -1, -1, 0, 1},
    {1, -1, -1, 1, -1},
    {1, -1, -1, 1, 0},
    {1, -1, -1, 1, 1},
    {1, -1, 0, -1, -1},
    {1, -1, 0, -1, 0},
    {1, -1, 0, -1, 1},
    {1, -1, 0, 0, -1},
    {1, -1, 0, 0, 0},
    {1, -1, 0, 0, 1},
    {1, -1, 0, 1, -1},
    {1, -1, 0, 1, 0},
    {1, -1, 0, 1, 1},
    {1, -1, 1, -1, -1},
    {1, -1, 1, -1, 0},
    {1, -1, 1, -1, 1},
    {1, -1, 1, 0, -1},
    {1, -1, 1, 0, 0},
    {1, -1, 1, 0, 1},
    {1, -1, 1, 1, -1},
    {1, -1, 1, 1, 0},
    {1, -1, 1, 1, 1},
    {1, 0, -1, -1, -1},
    {1, 0, -1, -1, 0},
    {1, 0, -1, -1, 1},
    {1, 0, -1, 0, -1},
    {1, 0, -1, 0, 0},
    {1, 0, -1, 0, 1},
    {1, 0, -1, 1, -1},
    {1, 0, -1, 1, 0},
    {1, 0, -1, 1, 1},
    {1, 0, 0, -1, -1},
    {1, 0, 0, -1, 0},
    {1, 0, 0, -1, 1},
    {1, 0, 0, 0, -1},
    {1, 0, 0, 0, 0},
    {1, 0, 0, 0, 1},
    {1, 0, 0, 1, -1},
    {1, 0, 0, 1, 0},
    {1, 0, 0, 1, 1},
    {1, 0, 1, -1, -1},
    {1, 0, 1, -1, 0},
    {1, 0, 1, -1, 1},
    {1, 0, 1, 0, -1},
    {1, 0, 1, 0, 0},
    {1, 0, 1, 0, 1},
    {1, 0, 1, 1, -1},
    {1, 0, 1, 1, 0},
    {1, 0, 1, 1, 1},
    {1, 1, -1, -1, -1},
    {1, 1, -1, -1, 0},
    {1, 1, -1, -1, 1},
    {1, 1, -1, 0, -1},
    {1, 1, -1, 0, 0},
    {1, 1, -1, 0, 1},
    {1, 1, -1, 1, -1},
    {1, 1, -1, 1, 0},
    {1, 1, -1, 1, 1},
    {1, 1, 0, -1, -1},
    {1, 1, 0, -1, 0},
    {1, 1, 0, -1, 1},
    {1, 1, 0, 0, -1},
    {1, 1, 0, 0, 0},
    {1, 1, 0, 0, 1},
    {1, 1, 0, 1, -1},
    {1, 1, 0, 1, 0},
    {1, 1, 0, 1, 1},
    {1, 1, 1, -1, -1},
    {1, 1, 1, -1, 0},
    {1, 1, 1, -1, 1},
    {1, 1, 1, 0, -1},
    {1, 1, 1, 0, 0},
    {1, 1, 1, 0, 1},
    {1, 1, 1, 1, -1},
    {1, 1, 1, 1, 0},
    {1, 1, 1, 1, 1}};

static constexpr uint8_t encode5(int8_t v0, int8_t v1, int8_t v2,
                                 int8_t v3, int8_t v4) noexcept
{
    return uint8_t((v0 + 1) * 81 +
                   (v1 + 1) * 27 +
                   (v2 + 1) * 9 +
                   (v3 + 1) * 3 +
                   (v4 + 1) * 1);
}