#pragma once
#include <vector>
#include <iostream>
#include <iostream>
#include <vector>
#include <cstdlib>
#include <chrono>
#include <random>

using namespace std;

constexpr uint8_t encode(int8_t v0, int8_t v1, int8_t v2, int8_t v3, int8_t v4) noexcept;

class CompressedCSC
{
public:
	vector<uint8_t> vals;
	vector<int> col_start;

	CompressedCSC(int *matrix, int K, int N)
	{
		int *matrix_walker = matrix;
		for (int n = 0; n < N; ++n)
		{
			for (int k = 0; k < K - 5; k += 5)
			{ // K rows
				if (matrix_walker[0] == 0 && matrix_walker[1] == 0 && matrix_walker[2] == 0 && matrix_walker[3] == 0 && matrix_walker[4] == 0)
				{
					continue;
				}

				uint8_t bitstring = encode(matrix_walker[0], matrix_walker[1], matrix_walker[2], matrix_walker[3], matrix_walker[4]);
				vals.push_back(bitstring);
			}
			// cleanup for last few bits
			int values[5] = {0, 0, 0, 0, 0};
			for (int k_pad = K % 5; k_pad >= 0; --k_pad)
				values[5 - k_pad] = *matrix_walker;
			uint8_t bitstring = encode(values[0], values[1], values[2], values[3], values[4]);
			vals.push_back(bitstring);
			
			col_start.push_back(vals.size());
		}
	}
};

constexpr uint8_t encode(int8_t v0, int8_t v1, int8_t v2,
						 int8_t v3, int8_t v4) noexcept
{
	return uint8_t((v0 + 1) * 81 +
				   (v1 + 1) * 27 +
				   (v2 + 1) * 9 +
				   (v3 + 1) * 3 +
				   (v4 + 1) * 1);
}

static constexpr int8_t decode[256][5] = {
	{-1, -1, -1, -1, -1},
	{-1, -1, -1, -1, 0},
	{-1, -1, -1, -1, 1},
	{-1, -1, -1, 0, -1},
	{-1, -1, -1, 0, 0},
	{-1, -1, -1, 0, 1},
	{-1, -1, -1, 1, -1},
	{-1, -1, -1, 1, 0},
	{-1, -1, -1, 1, 1},
	{-1, -1, 0, -1, -1},
	{-1, -1, 0, -1, 0},
	{-1, -1, 0, -1, 1},
	{-1, -1, 0, 0, -1},
	{-1, -1, 0, 0, 0},
	{-1, -1, 0, 0, 1},
	{-1, -1, 0, 1, -1},
	{-1, -1, 0, 1, 0},
	{-1, -1, 0, 1, 1},
	{-1, -1, 1, -1, -1},
	{-1, -1, 1, -1, 0},
	{-1, -1, 1, -1, 1},
	{-1, -1, 1, 0, -1},
	{-1, -1, 1, 0, 0},
	{-1, -1, 1, 0, 1},
	{-1, -1, 1, 1, -1},
	{-1, -1, 1, 1, 0},
	{-1, -1, 1, 1, 1},
	{-1, 0, -1, -1, -1},
	{-1, 0, -1, -1, 0},
	{-1, 0, -1, -1, 1},
	{-1, 0, -1, 0, -1},
	{-1, 0, -1, 0, 0},
	{-1, 0, -1, 0, 1},
	{-1, 0, -1, 1, -1},
	{-1, 0, -1, 1, 0},
	{-1, 0, -1, 1, 1},
	{-1, 0, 0, -1, -1},
	{-1, 0, 0, -1, 0},
	{-1, 0, 0, -1, 1},
	{-1, 0, 0, 0, -1},
	{-1, 0, 0, 0, 0},
	{-1, 0, 0, 0, 1},
	{-1, 0, 0, 1, -1},
	{-1, 0, 0, 1, 0},
	{-1, 0, 0, 1, 1},
	{-1, 0, 1, -1, -1},
	{-1, 0, 1, -1, 0},
	{-1, 0, 1, -1, 1},
	{-1, 0, 1, 0, -1},
	{-1, 0, 1, 0, 0},
	{-1, 0, 1, 0, 1},
	{-1, 0, 1, 1, -1},
	{-1, 0, 1, 1, 0},
	{-1, 0, 1, 1, 1},
	{-1, 1, -1, -1, -1},
	{-1, 1, -1, -1, 0},
	{-1, 1, -1, -1, 1},
	{-1, 1, -1, 0, -1},
	{-1, 1, -1, 0, 0},
	{-1, 1, -1, 0, 1},
	{-1, 1, -1, 1, -1},
	{-1, 1, -1, 1, 0},
	{-1, 1, -1, 1, 1},
	{-1, 1, 0, -1, -1},
	{-1, 1, 0, -1, 0},
	{-1, 1, 0, -1, 1},
	{-1, 1, 0, 0, -1},
	{-1, 1, 0, 0, 0},
	{-1, 1, 0, 0, 1},
	{-1, 1, 0, 1, -1},
	{-1, 1, 0, 1, 0},
	{-1, 1, 0, 1, 1},
	{-1, 1, 1, -1, -1},
	{-1, 1, 1, -1, 0},
	{-1, 1, 1, -1, 1},
	{-1, 1, 1, 0, -1},
	{-1, 1, 1, 0, 0},
	{-1, 1, 1, 0, 1},
	{-1, 1, 1, 1, -1},
	{-1, 1, 1, 1, 0},
	{-1, 1, 1, 1, 1},
	{0, -1, -1, -1, -1},
	{0, -1, -1, -1, 0},
	{0, -1, -1, -1, 1},
	{0, -1, -1, 0, -1},
	{0, -1, -1, 0, 0},
	{0, -1, -1, 0, 1},
	{0, -1, -1, 1, -1},
	{0, -1, -1, 1, 0},
	{0, -1, -1, 1, 1},
	{0, -1, 0, -1, -1},
	{0, -1, 0, -1, 0},
	{0, -1, 0, -1, 1},
	{0, -1, 0, 0, -1},
	{0, -1, 0, 0, 0},
	{0, -1, 0, 0, 1},
	{0, -1, 0, 1, -1},
	{0, -1, 0, 1, 0},
	{0, -1, 0, 1, 1},
	{0, -1, 1, -1, -1},
	{0, -1, 1, -1, 0},
	{0, -1, 1, -1, 1},
	{0, -1, 1, 0, -1},
	{0, -1, 1, 0, 0},
	{0, -1, 1, 0, 1},
	{0, -1, 1, 1, -1},
	{0, -1, 1, 1, 0},
	{0, -1, 1, 1, 1},
	{0, 0, -1, -1, -1},
	{0, 0, -1, -1, 0},
	{0, 0, -1, -1, 1},
	{0, 0, -1, 0, -1},
	{0, 0, -1, 0, 0},
	{0, 0, -1, 0, 1},
	{0, 0, -1, 1, -1},
	{0, 0, -1, 1, 0},
	{0, 0, -1, 1, 1},
	{0, 0, 0, -1, -1},
	{0, 0, 0, -1, 0},
	{0, 0, 0, -1, 1},
	{0, 0, 0, 0, -1},
	{0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1},
	{0, 0, 0, 1, -1},
	{0, 0, 0, 1, 0},
	{0, 0, 0, 1, 1},
	{0, 0, 1, -1, -1},
	{0, 0, 1, -1, 0},
	{0, 0, 1, -1, 1},
	{0, 0, 1, 0, -1},
	{0, 0, 1, 0, 0},
	{0, 0, 1, 0, 1},
	{0, 0, 1, 1, -1},
	{0, 0, 1, 1, 0},
	{0, 0, 1, 1, 1},
	{0, 1, -1, -1, -1},
	{0, 1, -1, -1, 0},
	{0, 1, -1, -1, 1},
	{0, 1, -1, 0, -1},
	{0, 1, -1, 0, 0},
	{0, 1, -1, 0, 1},
	{0, 1, -1, 1, -1},
	{0, 1, -1, 1, 0},
	{0, 1, -1, 1, 1},
	{0, 1, 0, -1, -1},
	{0, 1, 0, -1, 0},
	{0, 1, 0, -1, 1},
	{0, 1, 0, 0, -1},
	{0, 1, 0, 0, 0},
	{0, 1, 0, 0, 1},
	{0, 1, 0, 1, -1},
	{0, 1, 0, 1, 0},
	{0, 1, 0, 1, 1},
	{0, 1, 1, -1, -1},
	{0, 1, 1, -1, 0},
	{0, 1, 1, -1, 1},
	{0, 1, 1, 0, -1},
	{0, 1, 1, 0, 0},
	{0, 1, 1, 0, 1},
	{0, 1, 1, 1, -1},
	{0, 1, 1, 1, 0},
	{0, 1, 1, 1, 1},
	{1, -1, -1, -1, -1},
	{1, -1, -1, -1, 0},
	{1, -1, -1, -1, 1},
	{1, -1, -1, 0, -1},
	{1, -1, -1, 0, 0},
	{1, -1, -1, 0, 1},
	{1, -1, -1, 1, -1},
	{1, -1, -1, 1, 0},
	{1, -1, -1, 1, 1},
	{1, -1, 0, -1, -1},
	{1, -1, 0, -1, 0},
	{1, -1, 0, -1, 1},
	{1, -1, 0, 0, -1},
	{1, -1, 0, 0, 0},
	{1, -1, 0, 0, 1},
	{1, -1, 0, 1, -1},
	{1, -1, 0, 1, 0},
	{1, -1, 0, 1, 1},
	{1, -1, 1, -1, -1},
	{1, -1, 1, -1, 0},
	{1, -1, 1, -1, 1},
	{1, -1, 1, 0, -1},
	{1, -1, 1, 0, 0},
	{1, -1, 1, 0, 1},
	{1, -1, 1, 1, -1},
	{1, -1, 1, 1, 0},
	{1, -1, 1, 1, 1},
	{1, 0, -1, -1, -1},
	{1, 0, -1, -1, 0},
	{1, 0, -1, -1, 1},
	{1, 0, -1, 0, -1},
	{1, 0, -1, 0, 0},
	{1, 0, -1, 0, 1},
	{1, 0, -1, 1, -1},
	{1, 0, -1, 1, 0},
	{1, 0, -1, 1, 1},
	{1, 0, 0, -1, -1},
	{1, 0, 0, -1, 0},
	{1, 0, 0, -1, 1},
	{1, 0, 0, 0, -1},
	{1, 0, 0, 0, 0},
	{1, 0, 0, 0, 1},
	{1, 0, 0, 1, -1},
	{1, 0, 0, 1, 0},
	{1, 0, 0, 1, 1},
	{1, 0, 1, -1, -1},
	{1, 0, 1, -1, 0},
	{1, 0, 1, -1, 1},
	{1, 0, 1, 0, -1},
	{1, 0, 1, 0, 0},
	{1, 0, 1, 0, 1},
	{1, 0, 1, 1, -1},
	{1, 0, 1, 1, 0},
	{1, 0, 1, 1, 1},
	{1, 1, -1, -1, -1},
	{1, 1, -1, -1, 0},
	{1, 1, -1, -1, 1},
	{1, 1, -1, 0, -1},
	{1, 1, -1, 0, 0},
	{1, 1, -1, 0, 1},
	{1, 1, -1, 1, -1},
	{1, 1, -1, 1, 0},
	{1, 1, -1, 1, 1},
	{1, 1, 0, -1, -1},
	{1, 1, 0, -1, 0},
	{1, 1, 0, -1, 1},
	{1, 1, 0, 0, -1},
	{1, 1, 0, 0, 0},
	{1, 1, 0, 0, 1},
	{1, 1, 0, 1, -1},
	{1, 1, 0, 1, 0},
	{1, 1, 0, 1, 1},
	{1, 1, 1, -1, -1},
	{1, 1, 1, -1, 0},
	{1, 1, 1, -1, 1},
	{1, 1, 1, 0, -1},
	{1, 1, 1, 0, 0},
	{1, 1, 1, 0, 1},
	{1, 1, 1, 1, -1},
	{1, 1, 1, 1, 0},
	{1, 1, 1, 1, 1}};